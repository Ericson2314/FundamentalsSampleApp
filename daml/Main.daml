module Main where

import DA.Set (Set)
import DA.Optional qualified as Optional
import DA.Set qualified as Set

type FiefId = ContractId Fief

template Fief
    with
        king : Party
        noble : Party
        all_nobles : Set Party 
        split_from : Optional FiefId
        serfs : Set Party
    where 
        signatory king
        observer all_nobles `Set.union` serfs
        -- Rigid class :(
        ensure Set.member king all_nobles
            && Set.member noble all_nobles
            && Set.intersection serfs all_nobles == Set.empty
            -- King is original noble
            && (Optional.isSome split_from || (noble == king))

        -- | Split the fiefdom in two
        choice Split : (FiefId, FiefId)
            with
              newNoble : Party
              newSerfs : Set Party
            controller noble
            do
                -- Only draw from existing serfs
                guard $ (newSerfs `Set.union` this.serfs) == this.serfs
                a <- create this with
                    serfs = this.serfs `Set.difference` newSerfs
                    split_from = Some self
                b <- create this with
                    serfs = newSerfs
                    noble = newNoble
                    split_from = Some self
                pure (a, b)

        nonconsuming choice Fight : FiefId 
            with
               otherId : FiefId
               -- TODO in future version, 
               -- the king will declare winner, in lieu of RNG
               whoWins : Bool
            controller noble
            do 
                other <- fetch otherId
                guard $ other.noble /= this.noble
                guard $ other.king == this.king
                guard $ other.all_nobles == this.all_nobles
                archive $ if whoWins then otherId else self
                create this with
                    serfs = this.serfs `Set.union` other.serfs
                    noble = if whoWins then other.noble else this.noble
