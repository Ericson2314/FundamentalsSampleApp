module Test where
import Main
import Daml.Script

import DA.Set (Set)
import DA.Set qualified as Set

setup : Script ()
setup = do 
    alice <- allocatePartyWithHint "Alice" $ PartyIdHint "Alice"
    nobles <- mapA
        (\x -> allocatePartyWithHint x $ PartyIdHint x)
        ["Bob", "Bill", "Boris"]
    let [bob, bill, boris] = nobles

    let king_and_nobles : Set Party
        king_and_nobles = Set.insert alice $ Set.fromList nobles

    serfs <- mapA
        (\x -> allocatePartyWithHint x $ PartyIdHint x)
        ["Charlie", "Chad", "Christine", "Cinthy", "Cedrick"]
    let [charlie, chad, christine, cinthy, cedrick] = serfs
    
    orig <- submit alice do
        createCmd Fief with
            king = alice
            noble = alice
            split_from = None
            all_nobles = king_and_nobles
            serfs = Set.fromList serfs

    -- original noble must be king
    submitMustFail alice do
        createCmd Fief with
            king = alice
            noble = bob
            split_from = None
            all_nobles = king_and_nobles
            serfs = Set.fromList serfs    

    -- original noble can't be serf
    submitMustFail charlie do
        createCmd Fief with
            king = charlie
            noble = charlie
            split_from = None
            all_nobles = king_and_nobles
            serfs = Set.fromList serfs  

    -- -- view land bound to
    -- submit charlie do
    --     f <- fetch orig
    --     guard $ charlie `Set.member` f.serfs

    (royalRemaining0, bobFief0) <- submit alice do
        exerciseCmd orig Split with
           newNoble = bob
           newSerfs = Set.fromList [chad, christine]

    (royalRemaining1, billFief0) <- submit alice do
        exerciseCmd royalRemaining0 Split with
           newNoble = bill
           newSerfs = Set.fromList [cinthy, cedrick]

    -- non-King and also split
    (billFief1, borisFief) <- submit bill do
        exerciseCmd billFief0 Split with
           newNoble = boris
           newSerfs = Set.fromList [cedrick]


    -- Can't fight oneself
    submitMustFail bob do
        exerciseCmd bobFief0 Fight with
           otherId = bobFief0
           whoWins = False

    bobFief1 <- submit bob do
        exerciseCmd bobFief0 Fight with
           otherId = billFief1
           whoWins = False

    pure ()

    -- -- Bob won
    -- guard $ bobFief1.noble == bob
    -- -- Bob got more serfs
    -- guard $ bobFief1.serfs == bobFief0.serfs `Set.union` billFief1.serfs
